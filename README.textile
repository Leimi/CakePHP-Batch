h1. CakePHP Batch (and filter) Plugin

Paginates Filtered Records and allows Batch deletion and updating of records

h2. Background

The Batch plugin is an extension of "Jose Diaz-Gonzalez's Filter plugin":http://github.com/josegonzalez/cakephp-filter-component, which is something of a fork of "James Fairhurst's Filter Component":http://www.jamesfairhurst.co.uk/posts/view/cakephp_filter_component/, which is in turn a fork by "Maciej Grajcarek":http://blog.uplevel.pl/index.php/2008/06/cakephp-12-filter-component/, which is ITSELF a fork from "Nik Chankov's code":http://nik.chankov.net/2008/03/01/filtering-component-for-your-tables/. "Chad Jablonski":http://github.com/cjab/cakephp-filter-plugin then added RANGE support with a few bug fixes. "jmroth":http://github.com/jmroth/cakephp-filter-plugin pointed out a pretty bad redirect issue and "fixed it". This also contains a view helper made by "Matt Curry":http://github.com/mcurry/cakephp-filter-component.

<del>This also uses a behavior adapted from work by "Brenton":http://bakery.cakephp.org/articles/view/habtm-searching to allow for HasAndBelongsToMany and HasMany relationships.</del> Disabled for now as the behavior isn't working.

h2. Installation

h3. Download

# Clone from github : in your plugin directory type
	@git clone git://github.com/ProLoser/CakePHP-Batch.git batch@
# Add as a git submodule : from your app/ directory type
	@git submodule add git://github.com/ProLoser/CakePHP-Batch.git plugins/batch@
# Download an archive from github and extract the contents into @/plugins/batch@

h3. Include Component

# Include the component in your controller (AppController or otherwise)
	@var $components = array('Batch.Batch');@

h3. Setting up the forms

<pre><code><?php echo $this->Batch->create('Post')?>	
<table cellpadding="0" cellspacing="0">
<tr>
	<th><?php echo $this->Paginator->sort('subject');?></th>
	<th><?php echo $this->Paginator->sort('body');?></th>
	<th><?php echo $this->Paginator->sort('user_id');?></th>
	<th><?php echo $this->Paginator->sort('published');?></th>
	<th class="actions"><?php __('Actions');?></th>
</tr>
<?php 
echo $this->Batch->filter(array('subject', 'body', 'user_id', 'published'));
$i = 0;
foreach ($posts as $post):
	$class = null;
	if ($i++ % 2 == 0) {
		$class = ' class="altrow"';
	}
?>
<tr<?php echo $class;?>>
	<td><?php echo $post['Post']['subject']; ?>&nbsp;</td>
	<td><?php echo $post['Post']['body']; ?>&nbsp;</td>
	<td><?php echo $post['Post']['user_id']; ?>&nbsp;</td>
	<td><?php echo $post['Post']['published']; ?>&nbsp;</td>
	<td class="actions">
		<?php echo $this->Html->link(__('View', true), array('action' => 'view', $post['Post']['id']), array('class' => 'view')); ?>
		<?php echo $this->Html->link(__('Edit', true), array('action' => 'edit', $post['Post']['id']), array('class' => 'edit')); ?>
		<?php echo $this->Html->link(__('Delete', true), array('action' => 'delete', $post['Post']['id']), array('class' => 'delete'), sprintf(__('Are you sure you want to delete # %s?', true), $post['Post']['id'])); ?>
		<?php echo $this->Batch->checkbox($post['Post']['id']); ?>
	</td>
</tr>
<?php 
endforeach;
echo $this->Batch->batch(array(null, null, 'user_id', 'published')); 
?>
</table>
<?php echo $this->Batch->end()?></code></pre>

h3. Note on 1.2 usage (CURRENTLY BROKEN?)

In order for this to work in 1.2, you need to have the following in your controller:

<pre><code><?php
class PostsController extends AppController {
	var $components = array('Batch.Batch');

	function index() {
		$filterOptions = $this->Batch->filterOptions;
		$posts = $this->paginate();
		$users = $this->Post->User->find('list');
		$this->set(compact('filterOptions', 'posts', 'users'));
	}
}
?></code></pre>

And then merge the $filterOptions variable on anything pagination uses. It can be set globally using PaginatorHelper::options() as follows (in the view):

@<?php $paginator->options($filterOptions); ?>@


h2. Advanced Usage


h3. Overriding the Filter pagination

h4. Option 1: Controller-wide

By setting the @$paginate@ variable for your controller, the Filter component merges those into it's own rules before processing incoming information.

<pre><code><?php
class PostsController extends AppController {
	var $name = 'Posts';
	var $components = array('Batch.Batch');
	var $paginate = array('contain' => array('Comment'), 'limit' => 5);

	function index() {
		$posts = $this->paginate();
		$users = $this->Post->User->find('list');
		$this->set(compact('posts', 'users'));
	}
}
?></code></pre>

h4. Option 2: Action-specific

You can merge in things to the paginate array before any pagination happens if necessary.

<pre><code><?php
class PostsController extends AppController {
	var $name = 'Posts';
	var $components = array('Batch.Batch'); // Defaults to index action only with no prefix

	function index() {
		$this->paginate['contain'] = array('Comment');
		$this->paginate['limit'] = 5;
		$posts = $this->paginate();
		$users = $this->Post->User->find('list');
		$this->set(compact('posts', 'users'));
	}
}
?></code></pre>

h3. Initialization Tips

These different initialization options are combined in the setup array. Defaults are shown below.

<pre><code><?php
class PostsController extends AppController {
	var $name = 'Posts';
	var $components = array('Batch.Batch' => array(
		'actions' => array('index'), // You need to add admin_index manually
		'defaults' => array(),
		'fieldFormatting' => array(
			'string'	=> "LIKE '%%%s%%'",
			'text'		=> "LIKE '%%%s%%'",
			'datetime'	=> "LIKE '%%%s%%'"
		),
		'formOptionsDatetime' => array(),
		'paginatorParams' => array(
			'page',
			'sort',
			'direction',
			'limit'
		),
		'parsed' => false,
		'redirect' => false,
		'useTime' => false,
		'separator' => '/',
		'rangeSeparator' => '-',
		'url' => array(),
		'whitelist' => array()
	));
}
?></code></pre>

# actions:				Array of actions upon which this component will act upon.
# defaults:				Holds pagination defaults for controller actions. (syntax is @array('Model' => array('key' => 'value')@)
# fieldFormatting:		Fields which will replace the regular syntax in where i.e. field = 'value'
# formOptionsDatetime:	Formatting for datetime fields (unused)
# paginatorParams:		Paginator params sent in the URL
# parsed:				Used to tell whether the data options have been parsed
# redirect:				Used to tell whether to redirect so the url includes filter data
# useTime:				Used to tell whether time should be used in the filtering
# separator:			Separator to use between fields in a date input
# rangeSeparator:		Separator to use between dates in a date range
# url:					Url variable used in paginate helper (syntax is @array('url' => $url)@);
# whitelist:			Array of fields and models for which this component may filter

h2. Todo

# Better code commenting - Done, left to help enforce the habit
# <del>Support Datetime</del> Done
# <del>Support URL redirects and parsing</del> Done
# <del>Refactor datetime filtering for ranges</del> Done
# <del>Allow the action to be configurable</del> Done
# <del>Support jQuery Datepicker</del> Outside scope
# Support Router prefixes, plugins, and named parameters in a "scope" instead of "actions" key.
# Expand hasMany and hasAndBelongsToMany support. Refactor behavior to conform with established practices.